name: CI to Docker Hub

on:
  push:
    branches: [ master ]

jobs:
  prepare:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        base:
          - slim-bullseye
          - bullseye
          - slim-buster
          - buster
          - alpine3.13
          - alpine3.14
        version:
          - "3.10"
          - "3.9"
          - "3.8"
    steps:
      -
        name: Check Out Repo
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      -
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      -
        name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      -
        name: Check Dokerfile existence
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "${{ matrix.version }}/${{ matrix.base }}/Dockerfile"
      -
        name: Build and push
        if: steps.check_files.outputs.files_exists == 'true'
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: "${{ matrix.version }}/${{ matrix.base }}/Dockerfile"
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/386,linux/amd64,linux/arm/v7,linux/arm64
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/multiarch-test:${{ matrix.version }}-${{ matrix.base }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - 
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
